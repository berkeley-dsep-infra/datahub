version: 2
jobs:
  build:
    docker:
      - image: buildpack-deps:bionic-scm
      
    working_directory: ~/repo
    steps:
      - run:
          name: Install base apt packages
          command: |
            apt-get update --yes -qq
            apt-get install --yes -qq python3 python3-venv git-crypt jq
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade -r requirements.txt
            # FIXME: Until a release happens
            pip install --upgrade git+https://github.com/jupyter/repo2docker.git@master
            echo 'export PATH="${HOME}/repo/venv/bin:$PATH"' >> ${BASH_ENV}
      - setup_remote_docker
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Determine range of commits we are building
          command: |
              # CircleCI doesn't have equivalent to Travis' COMMIT_RANGE
              COMMIT_RANGE=$(./.circleci/get-commit-range.py)
              echo ${COMMIT_RANGE}
              echo "export COMMIT_RANGE='${COMMIT_RANGE}'" >> ${BASH_ENV}
      - run:
          name: Test building datahub image if needed
          command: |
            hubploy build \
              deployments/datahub/image \
              gcr.io/ucb-datahub-2018/primary-user-image \
              --commit-range ${COMMIT_RANGE}
          environment:
            PYTHONIOENCODING: utf-8

      - run:
          name: Test building prob140 image if needed
          command: |
            hubploy build \
              deployments/prob140/image \
              gcr.io/ucb-datahub-2018/prob140-user-image \
              --commit-range ${COMMIT_RANGE}
          environment:
            PYTHONIOENCODING: utf-8
      - run:
          name: Test building data100 image if needed
          command: |
            hubploy build \
              deployments/data100/image \
              gcr.io/ucb-datahub-2018/data100-user-image \
              --commit-range ${COMMIT_RANGE}
          environment:
            PYTHONIOENCODING: utf-8

  deploy:
    docker:
      - image: buildpack-deps:bionic-scm
    working_directory: ~/repo
    steps:
      - run:
          name: Install base apt packages
          command: |
            apt-get update -qq --yes
            apt-get install -qq --yes python3 python3-venv git-crypt
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-gcloud-226-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-gcloud-226-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade -r requirements.txt
            # FIXME: Until a release happens
            pip install --upgrade git+https://github.com/jupyter/repo2docker@master

            curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-226.0.0-linux-x86_64.tar.gz | tar -C venv/ -xzf -
            # Be careful with quote ordering here. ${PATH} must not be expanded
            # Don't use ~ here - bash can interpret PATHs containing ~, but most other things can't.
            # Always use full PATHs in PATH!
            echo 'export PATH="${HOME}/repo/venv/bin:${HOME}/repo/venv/google-cloud-sdk/bin:${PATH}"' >> ${BASH_ENV}

      - setup_remote_docker
        
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-gcloud-226-{{ checksum "requirements.txt" }}

      - run:
          name: Determine range of commits we are building
          command: |
              # CircleCI doesn't have equivalent to Travis' COMMIT_RANGE
              COMMIT_RANGE=$(./.circleci/get-commit-range.py)
              echo ${COMMIT_RANGE}
              echo "export COMMIT_RANGE='${COMMIT_RANGE}'" >> ${BASH_ENV}

      - run:
          name: Set up GCR service account
          command: |
            echo ${GCR_READWRITE_KEY} > ${HOME}/gcr-readwrite-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcr-readwrite-key.json
            rm ${HOME}/gcr-readwrite-key.json
            gcloud auth configure-docker

      - run:
          name: Build datahub image if needed
          command: |
            hubploy build \
              --push \
              --commit-range ${COMMIT_RANGE} \
              deployments/datahub/image/ gcr.io/ucb-datahub-2018/primary-user-image
          environment:
            PYTHONIOENCODING: utf-8

      - run:
          name: Build prob140 image if needed
          command: |
            hubploy build \
              --push \
              --commit-range ${COMMIT_RANGE} \
              deployments/prob140/image/ gcr.io/ucb-datahub-2018/prob140-user-image
          environment:
            PYTHONIOENCODING: utf-8

      - run:
          name: Build data100 image if needed
          command: |
            hubploy build \
              --push \
              --commit-range ${COMMIT_RANGE} \
              deployments/data100/image/ gcr.io/ucb-datahub-2018/data100-user-image
          environment:
            PYTHONIOENCODING: utf-8

      - run:
          name: Unlock our secrets
          command: |
            echo "${GIT_CRYPT_KEY}" | base64 -d > ~/repo/key
            git crypt unlock ~/repo/key
            rm ~/repo/key

      - run:
          name: Authenticate to Google
          command: |
            echo ${GKE_READWRITE_KEY} > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            rm ${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ucb-datahub-2018
            gcloud --quiet config set compute/zone us-central1-b
            gcloud --quiet beta container clusters get-credentials prod --region=us-central1

      - run:
          name: Install helm
          command: |
            curl https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-linux-amd64.tar.gz | \
              tar -xzf -
            mv linux-amd64/helm /usr/local/bin
            helm init --client-only
            helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
            helm repo update

      - run:
          name: Deploy datahub
          command: |
            hubploy deploy datahub hub ${CIRCLE_BRANCH}

      - run:
          name: Deploy prob140
          command: |
            hubploy deploy prob140 hub ${CIRCLE_BRANCH}

      - run:
          name: Deploy data100
          command: |
            hubploy deploy data100 hub ${CIRCLE_BRANCH}

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - staging
                - prod
      - deploy:
          filters:
            branches:
              only:
                - staging
                - prod
